section
    h1 Pug
    p This text has been written in a pug file.Pug allows you to create html templates with inline JavaScript code.
        a(href="https://pugjs.org/api/getting-started.html") We are able to create any html element and set attributes such as class and href
    p You simply write the name of the element followed by the element's content.
        | We can also use the identation followed by " | " notation which can improve the readibility of complex sentences. 
    p
        | Also, elements can be nested within other elements by placing them beneath and indenting them.
        
    p
        | A CSV file has been loaded to supply this template with a data object which can be accessed like this: !{place.areanm}, #{place.areanm} and #[+value(place.areanm)]. The curly bracket methods are pug syntax and the square braket method is the way to pass a variable to the Rosae package.
        
section 
    h1 If / else
    p 
        | There are a couple of ways to create rules in pug. 
        | For instance, we can say 
        i
            | In !{place.areanm}, 
            | !{(place.long_term_illness_2011_pc<10) ? "only" : "" } 
            | !{place.long_term_illness_2011_pc}% of the population reported having a long term illness.
        | The question mark and colon notation means that we only include the word 
        i 'only'
        i
        | when the selected area has fewer than 10% of the population with a long term illness.
    if (place.areanm == 'Adur')
        p
            | We can also use if and else statements to control when to render entire sections of an article.
    else
        h2  Selecting Adur will change what text is shown here.

mixin unpaidcare
    p In Adur, !{place.unpaid_care_20_plus_2011_pc}% of people provide at least 20 hours of unpaid care per week.
    p If we wanted to, we could make all the following content on the page about unpaid care.
    
mixin longtermillness
    p In Adur, !{place.long_term_illness_2011_pc}% of people reported having a long term illness.
    p If we wanted to, we could make all the following content on the page about long term illness.

section
    h1 Mixins
    p
        | Mixins are basically functions that output some component of text. Mixins can be called inside other mixins allowing you to flexibly determine the entire content and structure of an article based on some variable. For example, you could create a mixin which can be selected when you want to generate an article that talks about the change in percentage of some variable, or select a different mixin when you want to talk about changes to an absolute value.
        // This is a comment that wont be rendered
        // Here we choose a mixin based on what variable is higher out of % of people with long term illness or giving over 20 hours of care
        if (place.long_term_illness_2011_pc > place.unpaid_care_20_plus_2011_pc)
            | #[+longtermillness]
        else
            | #[+unpaidcare]
            
section
    h1 Formatting numbers
    p
        | You may have noticed that numbers in this document have so far been formatted with a space between the "." and the first decimal place number, like 20.1.this is because the Rosae package automatically puts a space (and capital letter) after a fullstop.
    p
        | We can use 
        a(href="https://rosaenlg.org/rosaenlg/3.2.4/mixins_ref/value_numbers.html") 
            | Rosae's number formatting capablities 
        a
        | if we insert the number as a Rosae variable: #[+value(20.1)]. We can also change the formatting, for instance textualising the number: #[+value(20.1, {'TEXTUAL':true })]. If we are using a whole number we can convert it to an ordinal: #[+value(21, {'ORDINAL_NUMBER':true })].
        
mixin intro
    synz {mode:'sequence'}
        syn
          | In the decade leading up to the last census
        syn
          | Between the last two census
        syn
          | In the decade to 2021

section
    h1 Rosae functions
    h2 Synonyms
    p
        | #[+intro] the rate of unemployment decreased. 
    p
        | #[+intro] the rate of unemployment decreased. 
    
    h2 Has Said
    if (Math.random() > 0.2)
        p
            | This random number was below #[+value(0.2)].
            recordSaid('RANDOM')
    
    if (Math.random() > 0.6)
        p
            | This random number was below #[+value(0.6)].
            recordSaid('RANDOM')
    
    p
        | We've recorded whether or not we've mentioned a random number so we can now use that information to determine what text to genereate in other parts of the the article.
    if (hasSaid('RANDOM'))
        p
            | We'll only mention this bit of text if one of the randome numbers has been mentioned. We can also delete the record of a previously said word.
            deleteSaid('number')
            

    h2 Lists
    - var places_in_London = ["Barnet", "Camden", "Islington", "Hackney"]
    p 
        | Using the "eachz" key word we can format a list:
        eachz place in places_in_London with { separator:',', last_separator:'and' }
            | #{place}
        | are places in London.
        
section
    h1 Structure
    p
        | When I'm structuring an article I start by passing numbers to a main section mixin, as follows:
        
mixin segment(i)
    p
        if (i == 0)
            | This is the very start of the article.
        if (i == 1)
            | This is the second section.
        if (i == 2)
            | This is the last section of this short article.
        // I also pass a list which informs the order of topics it could be as simple as:
        - var stories = ['unpaid_care_20_plus_2011_pc', 'long_term_illness_2011_pc', 'limited_lot_2011_pc']
        // I also use a lookup to provide the correct language 
        - var language_lookup = {'unpaid_care_20_plus_2011_pc': 'unpaid care', 'long_term_illness_2011_pc': 'long term illness', 'limited_lot_2011_pc': 'disability'}
        | This segment of the article is about !{language_lookup[stories[i]]}

| #[+segment(0)]
| #[+segment(1)]
| #[+segment(2)]